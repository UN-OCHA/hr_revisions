<?php
/**
 * @file
 */
 

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_revisions_form_indicator_data_batch_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'hr_revisions') . '/css/hr_revisions.css');
  drupal_add_js(drupal_get_path('module', 'hr_revisions') . '/js/hr_revisions.js');
  $revisioned_fields = array();
  hr_revisions_show_revisions($form, $form['#node'], 'indicator_data_batch', $revisioned_fields);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_revisions_form_sectoral_analysis_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'hr_revisions') . '/css/hr_revisions.css');
  drupal_add_js(drupal_get_path('module', 'hr_revisions') . '/js/hr_revisions.js');
  $revisioned_fields = array('field_sectoral_analysis');
  hr_revisions_show_revisions($form, $form['#node'], 'sectoral_analysis', $revisioned_fields);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function hr_revisions_form_hr_sitrep_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'hr_revisions') . '/css/hr_revisions.css');
  drupal_add_js(drupal_get_path('module', 'hr_revisions') . '/js/hr_revisions.js');
  $revisioned_fields = array('field_crf_hum_needs', 'field_crf_hum_response', 'field_crf_gaps');
  hr_revisions_show_revisions($form, $form['#node'], 'hr_sitrep', $revisioned_fields);
}

/**
 * Pre-populates field content from previous requests. Displays
 * field changes to previous revisions inline.
 *
 */
function hr_revisions_show_revisions(&$form, $node, $content_type, $revisioned_fields) {
  module_load_include('inc', 'diff', 'diff.diff');
  
  // An existing node gets edited.
  if (isset($node->nid)) {
    $revision_list = node_revision_list($node);
    $last_revision = next($revision_list);
    if ($last_revision) {
      $previous_node = node_load($node->nid, $last_revision->vid);
      $diff = diff_entity_diff($previous_node, $node, array('entity_type' => 'node', 'view_mode' => FALSE));      
      foreach ($revisioned_fields as $field) {
        if (isset($form[$field]['und'][0]['value'])) {
          $description = t('This entry has been carried over from "@field_title" from @date.', array('@field_title' => $form[$field]['und'][0]['value']['#title'], '@date' => format_date($previous_node->created)));
          if ($diff[$field]['#new'] != $diff[$field]['#old']) {
            $description .= ' ' . t('Changed from "@old_value" in the last revision from @date', array('@old_value' => $diff[$field]['#old'], '@date' => format_date($previous_node->changed)));
          }
          $description .= ' <span class="hr-revisions-clear">' . t('clear') . '</span>'; 
          $form[$field]['und'][0]['value']['#description'] = $description;
        }
      }
    }
  }
  // A new node gets created.
  else {
    if (isset($_REQUEST['edit']['field_crf_request']['und']) && isset($_REQUEST['edit']['field_cluster']['und'])) {
      $crf_request_nid = $_REQUEST['edit']['field_crf_request']['und'];
      $cluster_tid = $_REQUEST['edit']['field_cluster']['und'];
      $previous_crf_request_nid = hr_revisions_get_previous_crf_request_nid($crf_request_nid);      
      if ($previous_crf_request_nid) {
        $previous_node = hr_revisions_get_previous_node($content_type, $previous_crf_request_nid, $cluster_tid);
        if ($previous_node) {
          foreach ($revisioned_fields as $field) {      
            $form[$field]['und'][0]['value']['#default_value'] = $previous_node->{$field}['und'][0]['value'];            
            $description = t('This entry has been carried over from "@field_title" from @date', array('@field_title' => $form[$field]['und'][0]['#title'], '@date' => format_date($previous_node->changed)));
            $description .= ' <span class="hr-revisions-clear">' . t('clear') . '</span>';
            $form[$field]['und'][0]['value']['#description'] = $description;
          }
        }
      }

    }
  }
}

/**
 * Helper function to retrieve previous CRF Request Node ID
 * if there is any.
 *
 */
function hr_revisions_get_previous_crf_request_nid($crf_request_nid) {
  $previous_crf_request_nid = NULL;
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'crf_request')
  ->entityCondition('entity_id', $crf_request_nid, '!=')
  ->propertyCondition('status', 1)
  ->range(0, 1)
  ->propertyOrderBy('created', 'DESC')
  ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();
  
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $previous_crf_request_nid = array_shift($nids);
  }
  
  return $previous_crf_request_nid;
}

/**
 * Helper function to retrieve content entered for a previous
 * request.
 *
 */
function hr_revisions_get_previous_node($content_type, $previous_crf_request_nid, $cluster_tid) {
  $previous_node = NULL;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', $content_type)
  ->propertyCondition('status', 1)
  ->fieldCondition('field_crf_request', 'target_id', $previous_crf_request_nid, '=')
  ->fieldCondition('field_cluster', 'tid', $cluster_tid, '=')
  ->range(0, 1)
  ->propertyOrderBy('created', 'DESC')
  ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();
  
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nid = array_shift($nids);
    $previous_node = node_load($nid);
  }
  
  return $previous_node;
}


